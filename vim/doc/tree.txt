*tree.txt*	    For Vim version 6.1.  Last change: 2004 Nov 23 

	           tree - by Yury Altukhou
	    based on opsplorer - by Patrick Schiel 


		  an abstract tree view for vim
1. General		   |tree_general|
2. Functions		   |tree_functions|
3. Variables		   |tree_Variables|
4. Navigating		   |tree_Navigating|
5. Constants		   |tree_Constants|


   The tree.vim script is intended to be a base for various tree views ( for 
example FileTree). 

==============================================================================
*tree_general*

1. General			       *FileTree*
   tree.vim script needs few callback functions to work.  Names of 
the functions must be supplied in the buffer variables. Only the name of the
init function must be supplied in the parameters for the main functions :
|Tree_NewTreeWindow|.
   I've written FileTree.vim script based on it, that is very similar to
opsplore written by Patrick Schiel. The great part of the code was Patrick's.


==============================================================================
*tree_functions*
2. Functions: 

   |Tree_NewTreeWindow| - main global visible function. Opens New Window
   |Tree_RebuildTree|	- function to force tree redrawing.
   |Tree_GetPathUnderCursor|  -	 returns path of the node on the line holding
   cursor.
   |DummyFunction|   -	empty function used to avoid calling exists()
   function.
==============================================================================
*tree_Variables*
3. Variables

b:|Tree_pathSeparator| :char	       -  path separator
 Variables for call back functions:
b:|Tree_InitOptionsFunction| () :void  -  a function for option initialization
b:|Tree_ColorFunction| () :void	       -  a function for highlighting deinition
b:|Tree_InitMappingsFunction| () :void -  a function for initializing mappings
b:|Tree_IsLeafFunction| (path):boolean -  true if it has no subnodes false otherwise
b:|Tree_GetSubNodesFunction| (path):string[] - returns list of strings separated with '\n'
b:|Tree_OnLeafClick| (path):void - do somthing on the click on a leaf 


==============================================================================
*tree_Navigating*
4. Navigating	
							*tree_<LeftRelease>*
A single left click on a node symbol (+ and -) will expand and
respectively collapses the subtree. 
In keyboard mode, move to a node and press either Space or Return.

							*tree_<BS>*
Pressing the Backspace key goes to the parent node (in the tree path) and redraws the
tree there.
							*tree_<Down>*
Arrow down moves to the beginning of the next entry (filename or node
symbol).
							*tree_<Up>*
Arrow up moves to the beginning of the previous entry (filename or node
symbol).
							*tree_<S-Down>*
Shift + Arrow down moves to the next node symbol.
							*tree_<S-Up>*
Shift + Arrow up moves to the previous node symbol.
							*tree_q*
Press q to close the tree buffer.

							*opspl_<CR>*
Pressing Return on a leaf calles function |Tree_OnLeafClick|.

==============================================================================
*Tree_NewTreeWindow*
Tree_NewTreeWindow (initialPath, orientation,side,minWidth,minHeigh,initOptionsFunctnion)
   initialPath		- path with wich tree view will start.
   orientation		- ether vertical (1) or horizontal (0) 
   side			- a side where to show it right/bottom(1) left/top(0)
   minWidth		- minimal width of the window
   minHeigh		- minimal Heigh of the window
   initOptionsFunctnion	- a name of the function that will be called to
   initialize new tree. see |b:Tree_InitOptionsFunction|.
==============================================================================
*Tree_RebuildTree*
Tree_RebuildTree ()
   Takes no arguments.
   Simply rebuilds tree for the current path (current path of the tree).
==============================================================================
*Tree_GetPathUnderCursor*	
Tree_GetPathUnderCursor ()
   Takes no arguments.
   Returns path of the node on the line holding cursor.
==============================================================================
   *DummyFunction*
DummyFunction (...)
   Takes anything.
   Do nothing.
==============================================================================
*Tree_pathSeparator*
b:Tree_pathSeparator - holds separator for paths.
==============================================================================
*Tree_InitOptionsFunction* 
b:Tree_InitOptionsFunction
   Exspects a name of a global function, with signature :
   function name()
   This function will be called on startup (of the treeview). It may contain
   initialization for other callback functions, otherwise callback
   functions will be initialized with |DummyFunction|.
==============================================================================
*Tree_ColorFunction*
b:Tree_ColorFunction
   Exspects a name of a global function, with signature :
   function name()
   This function will be called to initialize hilighting for the treeview.
==============================================================================
*Tree_InitMappingsFunction*
b:Tree_InitMappingsFunction
   Exspects a name of a global function, with signature :
   function name()
   This function will be called to initialize specific mapping for the concret
   treeview.
==============================================================================
*Tree_IsLeafFunction* 
b:Tree_IsLeafFunction
   Exspects a name of a global function, with signature :
   function name(path):boolean
       Returns true if it has no subnodes false otherwise.
   This function will be call before addin entry to a tree to determine wether
   it can or can't have sub nodes.
==============================================================================
*Tree_GetSubNodesFunction* 
b:Tree_GetSubNodesFunction
   Exspects a name of a global function, with signature :
   function name(path):string[]
      Returns list of strings separated with "\n"
   This function will be called to expand node that can have sub nodes.
   see |Tree_IsLeafFunction|.
==============================================================================
*Tree_OnLeafClick*
b:Tree_OnLeafClick
   Exspects a name of a global function, with signature :
   function name(path)
   will be called when user clicked on the leaf entry of the tree to do some
   leaf specific functions.
==============================================================================
*tree_Constants*
Tree_VerticalSplit=1 - for vertical splitj
Tree_HorizontalSplit=0 - for horizontal split
Tree_Right=1   - for Right side window
Tree_Left=0    - for Left side window
Tree_Top=0     - for Top side window
Tree_Below=1   - for bottom side window
==============================================================================

   vim:tw=78:ts=8:ft=help:norl:
